# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3
    
#    # Spring Boot 어플리케이션 Build (1)
#    - name: Spring Boot Build
#      run: ./gradlew clean build --exclude-task test
    
    # DockerHub Login (2)
    - name: docker login
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    # Secret YML 파일 생성
#    - name: Set YML
#      run: |
#        mkdir -p src/main/resources
#        echo "${{ secrets.APPLICATION_YML }}" | base64 --decode > src/main/resources/application.yml
#        find src

    # Gradle 권한 부여
    - name: Grant permission for gradlew
      run: chmod +x ./gradlew
    # Test 없이 빌드
    - name: Build with Gradle
      run: ./gradlew clean build -x test
    #빌드한 jar 파일을 도커 이미지로 빌드하고 도커 허브에 푸시
    - name: web docker build and push
      run: |
         docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
         docker build -t sangeunrepo/haruharu .
         docker push sangeunrepo/haruharu

#    # Docker 이미지 Build (3)
#    - name: docker image build
#      run: docker build -t sangeunrepo/haruharu .
#
#    # Docker Hub push (4)
#    - name: docker Hub push
#      run: docker push sangeunrepo/haruharu

  deploy:
    # needs를 통해 build job이 수행 성공시에 작업되도록 설정
    needs: build
    runs-on: ubuntu-latest

    steps:
      # NCP 로그인 / docker image pull & run
      - name: NCP login and docker image pull and run
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.NCP_HOST }}
          username: ${{ secrets.NCP_USERNAME }}
          password: ${{ secrets.NCP_PASSWORD }}
          port: ${{ secrets.NCP_PORT }}
          script: |
            sudo docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
            sudo docker stop haruharu
            sudo docker container remove haruharu
            sudo docker pull sangeunrepo/haruharu
            sudo docker run -d --name haruharu -p 8080:8080 sangeunrepo/haruharu
            ps -ef | grep